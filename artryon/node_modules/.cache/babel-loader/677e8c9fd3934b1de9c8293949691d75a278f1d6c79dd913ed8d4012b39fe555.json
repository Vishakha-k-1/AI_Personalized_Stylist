{"ast":null,"code":"var _jsxFileName = \"/workspaces/AI_Personalized_Stylist/artryon/src/components/ARTryOn.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Canvas, useThree } from \"@react-three/fiber\";\nimport { OrbitControls, useGLTF } from \"@react-three/drei\";\nimport Webcam from \"react-webcam\";\nimport { Pose } from \"@mediapipe/pose\";\n\n// ModelViewer component that renders the 3D model\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ModelViewer = ({\n  modelUrl,\n  position,\n  scale\n}) => {\n  _s();\n  const {\n    scene\n  } = useGLTF(modelUrl);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: scene,\n    position: position,\n    scale: scale\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n};\n\n// ARTryOn component that handles webcam and 3D model interaction\n_s(ModelViewer, \"o+hqw2nGnmzAsiWsKcbG4W2mWg4=\", false, function () {\n  return [useGLTF];\n});\n_c = ModelViewer;\nconst ARTryOn = ({\n  selectedModel\n}) => {\n  _s2();\n  const webcamRef = useRef(null); // Declare webcamRef here\n  const [poseData, setPoseData] = useState({\n    x: 0,\n    y: 0,\n    z: -2.5,\n    scale: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"500px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 1\n      },\n      mirrored: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 2\n      },\n      camera: {\n        position: [0, 0, 5],\n        fov: 75,\n        near: 0.1,\n        far: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [2, 2, 2],\n        intensity: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelScene, {\n        selectedModel: selectedModel,\n        poseData: poseData,\n        setPoseData: setPoseData,\n        webcamRef: webcamRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n// ModelScene component where we access the camera and handle pose detection\n_s2(ARTryOn, \"NCY3ik8aLt5LKIbLRfrQhN+eX4k=\");\n_c2 = ARTryOn;\nconst ModelScene = ({\n  selectedModel,\n  poseData,\n  setPoseData,\n  webcamRef\n}) => {\n  _s3();\n  const {\n    camera\n  } = useThree(); // Access the camera from useThree()\n\n  useEffect(() => {\n    const loadPoseDetection = async () => {\n      const pose = new Pose({\n        locateFile: file => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`\n      });\n      pose.setOptions({\n        modelComplexity: 2,\n        smoothLandmarks: true,\n        enableSegmentation: false,\n        minDetectionConfidence: 0.8,\n        minTrackingConfidence: 0.8\n      });\n      pose.onResults(results => {\n        if (results.poseLandmarks) {\n          const leftShoulder = results.poseLandmarks[11]; // Left Shoulder\n          const rightShoulder = results.poseLandmarks[12]; // Right Shoulder\n          const leftHip = results.poseLandmarks[23]; // Left Hip\n          const rightHip = results.poseLandmarks[24]; // Right Hip\n\n          if (leftShoulder && rightShoulder && leftHip && rightHip) {\n            // Calculate the center of the body and the scale\n            const x = (leftShoulder.x + rightShoulder.x) / 2;\n            const y = (leftShoulder.y + rightShoulder.y) / 2;\n            const z = -2.0; // Depth (how far from the camera the model should be)\n\n            // Calculate the width of the shoulders and hips for dynamic scaling\n            const shoulderWidth = Math.abs(rightShoulder.x - leftShoulder.x);\n            const hipWidth = Math.abs(rightHip.x - leftHip.x);\n            const avgWidth = (shoulderWidth + hipWidth) / 2;\n            const scale = Math.max(1.5, avgWidth * 12);\n\n            // Set the pose data\n            setPoseData(prev => ({\n              x: prev.x * 0.8 + (x - 0.5) * 3 * 0.2,\n              // Smoothed X position\n              y: prev.y * 0.8 + (0.5 - y) * 2.5 * 0.2,\n              // Smoothed Y position\n              z,\n              scale\n            }));\n\n            // No need to move the camera based on body position\n            // The camera stays static. The model's position is updated according to body position.\n          }\n        }\n      });\n      const processFrame = async () => {\n        if (webcamRef.current && webcamRef.current.video.readyState === 4) {\n          await pose.send({\n            image: webcamRef.current.video\n          });\n        }\n        requestAnimationFrame(processFrame);\n      };\n      await pose.initialize();\n      processFrame();\n    };\n    loadPoseDetection();\n  }, [camera, webcamRef, setPoseData]); // Add setPoseData to dependencies\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedModel && /*#__PURE__*/_jsxDEV(ModelViewer, {\n      modelUrl: selectedModel,\n      position: [poseData.x * 5, -poseData.y * 5, poseData.z] // Adjust position based on body pose\n      ,\n      scale: [poseData.scale, poseData.scale, poseData.scale]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s3(ModelScene, \"Wo14/kl28HhoRfDX+Cg7MK2EhFU=\", false, function () {\n  return [useThree];\n});\n_c3 = ModelScene;\nexport default ARTryOn;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ModelViewer\");\n$RefreshReg$(_c2, \"ARTryOn\");\n$RefreshReg$(_c3, \"ModelScene\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Canvas","useThree","OrbitControls","useGLTF","Webcam","Pose","jsxDEV","_jsxDEV","Fragment","_Fragment","ModelViewer","modelUrl","position","scale","_s","scene","object","fileName","_jsxFileName","lineNumber","columnNumber","_c","ARTryOn","selectedModel","_s2","webcamRef","poseData","setPoseData","x","y","z","style","width","height","children","ref","top","left","zIndex","mirrored","camera","fov","near","far","intensity","enableZoom","ModelScene","_c2","_s3","loadPoseDetection","pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","minDetectionConfidence","minTrackingConfidence","onResults","results","poseLandmarks","leftShoulder","rightShoulder","leftHip","rightHip","shoulderWidth","Math","abs","hipWidth","avgWidth","max","prev","processFrame","current","video","readyState","send","image","requestAnimationFrame","initialize","_c3","$RefreshReg$"],"sources":["/workspaces/AI_Personalized_Stylist/artryon/src/components/ARTryOn.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Canvas, useThree } from \"@react-three/fiber\";\nimport { OrbitControls, useGLTF } from \"@react-three/drei\";\nimport Webcam from \"react-webcam\";\nimport { Pose } from \"@mediapipe/pose\";\n\n// ModelViewer component that renders the 3D model\nconst ModelViewer = ({ modelUrl, position, scale }) => {\n  const { scene } = useGLTF(modelUrl);\n  return <primitive object={scene} position={position} scale={scale} />;\n};\n\n// ARTryOn component that handles webcam and 3D model interaction\nconst ARTryOn = ({ selectedModel }) => {\n  const webcamRef = useRef(null);  // Declare webcamRef here\n  const [poseData, setPoseData] = useState({ x: 0, y: 0, z: -2.5, scale: 1 });\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"500px\" }}>\n      {/* Webcam Feed */}\n      <Webcam\n        ref={webcamRef}\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 1,\n        }}\n        mirrored\n      />\n\n      {/* 3D Model and Scene */}\n      <Canvas style={{ position: \"absolute\", top: 0, left: 0, zIndex: 2 }} camera={{ position: [0, 0, 5], fov: 75, near: 0.1, far: 1000 }}>\n        <ambientLight intensity={0.8} />\n        <directionalLight position={[2, 2, 2]} intensity={1} />\n        <OrbitControls enableZoom={false} />\n        <ModelScene selectedModel={selectedModel} poseData={poseData} setPoseData={setPoseData} webcamRef={webcamRef} />\n      </Canvas>\n    </div>\n  );\n};\n\n// ModelScene component where we access the camera and handle pose detection\nconst ModelScene = ({ selectedModel, poseData, setPoseData, webcamRef }) => {\n  const { camera } = useThree(); // Access the camera from useThree()\n\n  useEffect(() => {\n    const loadPoseDetection = async () => {\n      const pose = new Pose({\n        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,\n      });\n\n      pose.setOptions({\n        modelComplexity: 2,\n        smoothLandmarks: true,\n        enableSegmentation: false,\n        minDetectionConfidence: 0.8,\n        minTrackingConfidence: 0.8,\n      });\n\n      pose.onResults((results) => {\n        if (results.poseLandmarks) {\n          const leftShoulder = results.poseLandmarks[11]; // Left Shoulder\n          const rightShoulder = results.poseLandmarks[12]; // Right Shoulder\n          const leftHip = results.poseLandmarks[23]; // Left Hip\n          const rightHip = results.poseLandmarks[24]; // Right Hip\n\n          if (leftShoulder && rightShoulder && leftHip && rightHip) {\n            // Calculate the center of the body and the scale\n            const x = (leftShoulder.x + rightShoulder.x) / 2;\n            const y = (leftShoulder.y + rightShoulder.y) / 2;\n            const z = -2.0; // Depth (how far from the camera the model should be)\n\n            // Calculate the width of the shoulders and hips for dynamic scaling\n            const shoulderWidth = Math.abs(rightShoulder.x - leftShoulder.x);\n            const hipWidth = Math.abs(rightHip.x - leftHip.x);\n            const avgWidth = (shoulderWidth + hipWidth) / 2;\n            const scale = Math.max(1.5, avgWidth * 12);\n\n            // Set the pose data\n            setPoseData((prev) => ({\n              x: prev.x * 0.8 + (x - 0.5) * 3 * 0.2,  // Smoothed X position\n              y: prev.y * 0.8 + (0.5 - y) * 2.5 * 0.2,  // Smoothed Y position\n              z,\n              scale,\n            }));\n\n            // No need to move the camera based on body position\n            // The camera stays static. The model's position is updated according to body position.\n          }\n        }\n      });\n\n      const processFrame = async () => {\n        if (webcamRef.current && webcamRef.current.video.readyState === 4) {\n          await pose.send({ image: webcamRef.current.video });\n        }\n        requestAnimationFrame(processFrame);\n      };\n\n      await pose.initialize();\n      processFrame();\n    };\n\n    loadPoseDetection();\n  }, [camera, webcamRef, setPoseData]); // Add setPoseData to dependencies\n\n  return (\n    <>\n      {/* Render 3D model based on pose data */}\n      {selectedModel && (\n        <ModelViewer\n          modelUrl={selectedModel}\n          position={[poseData.x * 5, -poseData.y * 5, poseData.z]} // Adjust position based on body pose\n          scale={[poseData.scale, poseData.scale, poseData.scale]}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ARTryOn;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}